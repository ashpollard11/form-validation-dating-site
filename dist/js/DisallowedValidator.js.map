{"version":3,"sources":["DisallowedValidator.js"],"names":["DisallowedValidator","selector","characterArray","console","log","forEach","character","$field","value","includes","errors","push","Validator"],"mappings":";;;;;;;;;;;;IAAMA,mB;;;AACL,8BAAYC,QAAZ,EAAsBC,cAAtB,EAAsC;AAAA;;AACpB;AADoB,wIAC/BD,QAD+B;;AAErCE,UAAQC,GAAR,CAAY,sCAAZ;AACA,QAAKF,cAAL,GAAsBA,cAAtB,CAHqC,CAGC;AAHD;AAIrC;;;;6BAEU;AAAA;;AACV;;AAEA,QAAKA,cAAL,CAAoBG,OAApB,CAA4B,UAACC,SAAD,EAAe;AAC1C,QAAI,OAAKC,MAAL,CAAYC,KAAZ,CAAkBC,QAAlB,CAA2BH,SAA3B,CAAJ,EAA2C;AAC1C,YAAKI,MAAL,CAAYC,IAAZ,CAAiB,uDAAuD,OAAKT,cAA7E;AACA;AACD,IAJD;AAKA;;;;EAfgCU,S","file":"DisallowedValidator.js","sourcesContent":["class DisallowedValidator extends Validator {\n\tconstructor(selector, characterArray) {\n\t\tsuper(selector); //call constructor in validator()\n\t\tconsole.log('constructor from DisallowedValidator')\n\t\tthis.characterArray = characterArray; //take arguments and put them into properties of the class\n\t}\n\n\tvalidate() {\n\t\tsuper.validate();\n\n\t\tthis.characterArray.forEach((character) => {\n\t\t\tif (this.$field.value.includes(character)) {\n\t\t\t\tthis.errors.push(\"Password cannot contain the following characters: \" + this.characterArray);\n\t\t\t};\n\t\t});\n\t}\n}"]}