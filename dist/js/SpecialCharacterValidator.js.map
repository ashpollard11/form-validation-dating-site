{"version":3,"sources":["SpecialCharacterValidator.js"],"names":["SpecialCharacterValidator","selector","specialCharacters","console","log","foundASpecialCharacter","forEach","char","$field","value","includes","errors","push","Validator"],"mappings":";;;;;;;;;;;;IAAMA,yB;;;AACL,oCAAYC,QAAZ,EAAsBC,iBAAtB,EAAyC;AAAA;;AACvB;AADuB,oJAClCD,QADkC;;AAExCE,UAAQC,GAAR,CAAY,4CAAZ;;AAEA,QAAKF,iBAAL,GAAyBA,iBAAzB;AAJwC;AAKxC;;;;6BAIU;AAAA;;AACV;;AAEA,OAAIG,yBAAyB,KAA7B;;AAEA,QAAKH,iBAAL,CAAuBI,OAAvB,CAA+B,UAACC,IAAD,EAAU;AACxCJ,YAAQC,GAAR,CAAY,oBAAZ,EAAkCG,IAAlC;AACA,QAAI,OAAKC,MAAL,CAAYC,KAAZ,CAAkBC,QAAlB,CAA2BH,IAA3B,CAAJ,EAAsC;AACrCF,8BAAyB,IAAzB;AACA;AACD,IALD;;AAOA,OAAI,CAACA,sBAAL,EAA6B;AAC5B,SAAKM,MAAL,CAAYC,IAAZ,CAAiB,iEAAjB;AACA;;AAGD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;EAlCsCC,S","file":"SpecialCharacterValidator.js","sourcesContent":["class SpecialCharacterValidator extends Validator {\n\tconstructor(selector, specialCharacters) {\n\t\tsuper(selector); //call constructor in validator()\n\t\tconsole.log('constructor from SpecialCharacterValidator')\n\t\t\n\t\tthis.specialCharacters = specialCharacters;\n\t}\n\n\n\n\tvalidate() {\n\t\tsuper.validate();\n\n\t\tlet foundASpecialCharacter = false;\n\n\t\tthis.specialCharacters.forEach((char) => {\n\t\t\tconsole.log('look for character', char)\n\t\t\tif (this.$field.value.includes(char)) {\n\t\t\t\tfoundASpecialCharacter = true;\n\t\t\t}\n\t\t});\n\n\t\tif (!foundASpecialCharacter) {\n\t\t\tthis.errors.push(\"Password must include one of the following characters: !@#$%^&*\")\n\t\t}\n\n\n\t\t// this.specialCharacters.forEach((character) => {\n\t\t// \tif (this.$field.value.includes(character)) {\n\t\t// \t\treturn true;\n\t\t// \t} else {\n\t\t// \tthis.errors.push(\"Password must include one of the following characters: !@#$%^&*\");\n\t\t// \t};\n\t\t// });\n\t}\n}"]}